name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag name
        id: tag_name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          release_name: ClipManager ${{ steps.tag_name.outputs.TAG_NAME }}
          body: |
            ## ClipManager ${{ steps.tag_name.outputs.TAG_NAME }}
            
            ### 下载
            - **Windows**: clipmanager-windows.exe
            - **Linux**: clipmanager-linux
            
            ### 安装说明
            1. 下载对应平台的二进制文件
            2. 在 Linux 上，需要给文件添加执行权限：`chmod +x clipmanager-linux`
            3. 双击运行或在终端中执行
            
            ### 系统要求
            - **Windows**: Windows 10 或更高版本
            - **Linux**: 支持 X11 的现代 Linux 发行版
            
            ### 变更日志
            请查看提交历史了解详细变更。
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: clipmanager
            asset_name: clipmanager-linux
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            binary_name: clipmanager.exe
            asset_name: clipmanager-windows.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libssl-dev \
            libgtk-3-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libasound2-dev

      - name: Install cross-compilation dependencies (Windows)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: release-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            release-${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux only)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Prepare binary for upload
        run: |
          mkdir -p release-assets
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release-assets/${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release-assets/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
