name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean
      build_artifacts:
        description: 'Build and upload artifacts'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libssl-dev \
            libgtk-3-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libasound2-dev

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Run benchmarks (dry run)
        run: cargo bench --no-run

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: (github.event_name != 'workflow_dispatch' || github.event.inputs.build_artifacts == 'true') && (success() || github.event_name == 'workflow_dispatch')
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: clipmanager
            artifact_name: clipmanager-linux
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            binary_name: clipmanager.exe
            artifact_name: clipmanager-windows.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libssl-dev \
            libgtk-3-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libasound2-dev

      - name: Install cross-compilation dependencies (Windows)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary for upload
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/${{ matrix.artifact_name }}
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact_name }}
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/clipmanager-linux/clipmanager-linux
            artifacts/clipmanager-windows.exe/clipmanager-windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
